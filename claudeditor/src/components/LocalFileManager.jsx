import React, { useState, useEffect, useCallback } from 'react';
import localFileSystemService from '../services/LocalFileSystemService';
import './LocalFileManager.css';

/**
 * LocalFileManager - Êú¨Âú∞Êñá‰ª∂ÁÆ°ÁêÜÁªÑ‰ª∂
 * ÈõÜÊàê PowerAutomation local_adapter_mcp ÁöÑÊñá‰ª∂Á≥ªÁªüÈÄÇÈÖçÂô®
 */
const LocalFileManager = ({ onFileSelect, onFileEdit, onReleaseDeploy, className = '' }) => {
  // Êñá‰ª∂ÁÆ°ÁêÜÁä∂ÊÄÅ
  const [connectedFolders, setConnectedFolders] = useState([]);
  const [currentFolder, setCurrentFolder] = useState(null);
  const [files, setFiles] = useState([]);
  const [selectedFile, setSelectedFile] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState('name');
  
  // ËøûÊé•Áä∂ÊÄÅ
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  
  // Claude Code ËæìÂá∫
  const [claudeOutputs, setClaudeOutputs] = useState([]);
  const [showClaudeOutputs, setShowClaudeOutputs] = useState(true);
  
  // Êñá‰ª∂Â§πËøûÊé•ÂØπËØùÊ°Ü
  const [showConnectDialog, setShowConnectDialog] = useState(false);
  const [folderPath, setFolderPath] = useState('');

  // ÂàùÂßãÂåñÊúçÂä°
  useEffect(() => {
    initializeService();
    
    // Ê≥®ÂÜå Claude Code ËæìÂá∫ÂõûË∞É
    const handleClaudeOutput = async (claudeEvent) => {
      console.log('üéØ Êî∂Âà∞ Claude Code ËæìÂá∫:', claudeEvent);
      
      setClaudeOutputs(prev => [claudeEvent, ...prev.slice(0, 9)]); // ‰øùÁïôÊúÄÊñ∞10‰∏™
      
      // Âà∑Êñ∞ÂΩìÂâçÊñá‰ª∂Â§π
      if (currentFolder) {
        await refreshCurrentFolder();
      }
    };
    
    localFileSystemService.registerClaudeOutputCallback(handleClaudeOutput);
    
    // ÁõëÂê¨Êñá‰ª∂ÂàóË°®ÂèòÂåñ
    const handleFileListChanged = (event) => {
      const { folderId, files } = event.detail;
      if (currentFolder && currentFolder.id === folderId) {
        setFiles(files);
      }
    };
    
    window.addEventListener('fileListChanged', handleFileListChanged);
    
    return () => {
      localFileSystemService.unregisterClaudeOutputCallback(handleClaudeOutput);
      window.removeEventListener('fileListChanged', handleFileListChanged);
    };
  }, [currentFolder]);

  const initializeService = async () => {
    try {
      setConnectionStatus('connecting');
      const result = await localFileSystemService.initialize();
      
      if (result.success) {
        setIsConnected(true);
        setConnectionStatus('connected');
        
        // Âä†ËΩΩÂ∑≤ËøûÊé•ÁöÑÊñá‰ª∂Â§π
        const folders = localFileSystemService.getConnectedFolders();
        setConnectedFolders(folders);
        
        if (folders.length > 0) {
          setCurrentFolder(folders[0]);
          await loadFolderFiles(folders[0].id);
        }
      } else {
        setConnectionStatus('error');
        console.error('Êñá‰ª∂Á≥ªÁªüÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•:', result.error);
      }
    } catch (error) {
      setConnectionStatus('error');
      console.error('ÂàùÂßãÂåñÊñá‰ª∂Á≥ªÁªüÊúçÂä°Â§±Ë¥•:', error);
    }
  };

  const connectLocalFolder = async () => {
    if (!folderPath.trim()) {
      alert('ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πË∑ØÂæÑ');
      return;
    }
    
    try {
      setIsLoading(true);
      const result = await localFileSystemService.connectLocalFolder(folderPath, true);
      
      if (result.success) {
        const newFolder = {
          id: result.folder_id,
          path: result.path,
          fileCount: result.file_count,
          watchEnabled: result.watch_enabled
        };
        
        setConnectedFolders(prev => [...prev, newFolder]);
        setCurrentFolder(newFolder);
        setFiles(result.files || []);
        setShowConnectDialog(false);
        setFolderPath('');
        
        console.log(`‚úÖ Êñá‰ª∂Â§πËøûÊé•ÊàêÂäü: ${result.path}`);
      } else {
        alert(`ËøûÊé•Â§±Ë¥•: ${result.error}`);
      }
    } catch (error) {
      console.error('ËøûÊé•Êñá‰ª∂Â§πÂ§±Ë¥•:', error);
      alert(`ËøûÊé•Â§±Ë¥•: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const loadFolderFiles = async (folderId) => {
    try {
      setIsLoading(true);
      const result = await localFileSystemService.getFolderFiles(folderId);
      
      if (result.success) {
        setFiles(result.files);
      } else {
        console.error('Âä†ËΩΩÊñá‰ª∂Â§±Ë¥•:', result.error);
      }
    } catch (error) {
      console.error('Âä†ËΩΩÊñá‰ª∂Â§±Ë¥•:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const refreshCurrentFolder = async () => {
    if (!currentFolder) return;
    
    try {
      const result = await localFileSystemService.refreshFolder(currentFolder.id);
      if (result.success) {
        setFiles(result.files);
        
        // Êõ¥Êñ∞Êñá‰ª∂Â§π‰ø°ÊÅØ
        setConnectedFolders(prev => 
          prev.map(folder => 
            folder.id === currentFolder.id 
              ? { ...folder, fileCount: result.file_count }
              : folder
          )
        );
      }
    } catch (error) {
      console.error('Âà∑Êñ∞Êñá‰ª∂Â§πÂ§±Ë¥•:', error);
    }
  };

  const handleFileClick = async (file) => {
    setSelectedFile(file);
    
    if (file.type === 'file') {
      // ÈÄöÁü•Áà∂ÁªÑ‰ª∂Êñá‰ª∂Ë¢´ÈÄâ‰∏≠
      onFileSelect?.(file);
      
      // Â¶ÇÊûúÊòØÂèØÁºñËæëÊñá‰ª∂ÔºåËØªÂèñÂÜÖÂÆπ
      if (isEditableFile(file)) {
        await handleFileEdit(file);
      }
    } else if (file.type === 'directory') {
      // Â§ÑÁêÜÁõÆÂΩïÁÇπÂáªÔºàÂèØ‰ª•Êâ©Â±ï‰∏∫ËøõÂÖ•Â≠êÁõÆÂΩïÔºâ
      console.log(`üìÅ ÁÇπÂáªÁõÆÂΩï: ${file.name}`);
    }
  };

  const handleFileEdit = async (file) => {
    try {
      setIsLoading(true);
      const result = await localFileSystemService.getFileContent(file.path);
      
      if (result.success) {
        const fileWithContent = {
          ...file,
          content: result.content,
          lines: result.lines,
          language: result.language
        };
        
        // ÈÄöÁü•Áà∂ÁªÑ‰ª∂ÁºñËæëÊñá‰ª∂
        onFileEdit?.(fileWithContent);
        
        console.log(`üìù ÁºñËæëÊñá‰ª∂: ${file.name}`);
      } else {
        alert(`ËØªÂèñÊñá‰ª∂Â§±Ë¥•: ${result.error}`);
      }
    } catch (error) {
      console.error('ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπÂ§±Ë¥•:', error);
      alert(`ËØªÂèñÊñá‰ª∂Â§±Ë¥•: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReleaseDeploy = async (file) => {
    try {
      console.log(`üöÄ ÈÉ®ÁΩ≤ Release: ${file.name}`);
      
      // ÈÄöÁü•Áà∂ÁªÑ‰ª∂ÈÉ®ÁΩ≤ release
      onReleaseDeploy?.({
        ...file,
        deployType: 'release',
        deployPath: file.path
      });
      
    } catch (error) {
      console.error('ÈÉ®ÁΩ≤ Release Â§±Ë¥•:', error);
      alert(`ÈÉ®ÁΩ≤Â§±Ë¥•: ${error.message}`);
    }
  };

  const handleClaudeOutputClick = async (claudeEvent) => {
    const { fileInfo } = claudeEvent;
    
    if (fileInfo.isRelease) {
      await handleReleaseDeploy(fileInfo);
    } else if (fileInfo.canEdit) {
      await handleFileEdit(fileInfo);
    } else {
      await handleFileClick(fileInfo);
    }
  };

  const isEditableFile = (file) => {
    const editableExtensions = [
      '.md', '.txt', '.py', '.js', '.jsx', '.ts', '.tsx',
      '.html', '.css', '.scss', '.sass', '.json', '.yaml', '.yml'
    ];
    
    return editableExtensions.some(ext => file.name.endsWith(ext));
  };

  const isReleaseFile = (file) => {
    const releasePaths = ['dist/', 'build/', 'release/', 'deploy/'];
    const releaseExtensions = ['.zip', '.tar.gz', '.tgz'];
    
    return releasePaths.some(path => file.path.includes(path)) ||
           releaseExtensions.some(ext => file.name.endsWith(ext));
  };

  // Êñá‰ª∂ÊêúÁ¥¢ËøáÊª§
  const filteredFiles = files.filter(file => 
    file.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Êñá‰ª∂ÊéíÂ∫è
  const sortedFiles = [...filteredFiles].sort((a, b) => {
    switch (sortBy) {
      case 'name':
        return a.name.localeCompare(b.name);
      case 'date':
        return new Date(b.modified) - new Date(a.modified);
      case 'size':
        return a.type === 'directory' ? -1 : b.type === 'directory' ? 1 : b.size - a.size;
      case 'type':
        return a.type.localeCompare(b.type);
      default:
        return 0;
    }
  });

  const renderFileItem = (file) => {
    const isSelected = selectedFile?.path === file.path;
    const isEditable = isEditableFile(file);
    const isRelease = isReleaseFile(file);
    
    return (
      <div
        key={file.path}
        className={`file-item ${isSelected ? 'selected' : ''} ${file.type}`}
        onClick={() => handleFileClick(file)}
      >
        <div className="file-icon">
          {file.icon}
        </div>
        <div className="file-info">
          <div className="file-name" title={file.name}>
            {file.name}
          </div>
          <div className="file-meta">
            <span className="file-size">{file.size}</span>
            <span className="file-modified">{new Date(file.modified).toLocaleString()}</span>
          </div>
        </div>
        <div className="file-actions">
          {isEditable && (
            <button
              className="action-btn edit"
              onClick={(e) => {
                e.stopPropagation();
                handleFileEdit(file);
              }}
              title="ÁºñËæëÊñá‰ª∂"
            >
              üìù
            </button>
          )}
          {isRelease && (
            <button
              className="action-btn deploy"
              onClick={(e) => {
                e.stopPropagation();
                handleReleaseDeploy(file);
              }}
              title="ÈÉ®ÁΩ≤ Release"
            >
              üöÄ
            </button>
          )}
        </div>
      </div>
    );
  };

  const renderClaudeOutput = (claudeEvent, index) => {
    const { fileInfo, eventType, timestamp } = claudeEvent;
    
    return (
      <div
        key={`${fileInfo.path}-${timestamp}`}
        className={`claude-output-item ${fileInfo.isRelease ? 'release' : 'file'}`}
        onClick={() => handleClaudeOutputClick(claudeEvent)}
      >
        <div className="output-icon">
          {fileInfo.isRelease ? 'üöÄ' : 'üìÑ'}
        </div>
        <div className="output-info">
          <div className="output-name">{fileInfo.name}</div>
          <div className="output-meta">
            <span className="output-type">
              {fileInfo.isRelease ? 'Release' : 'File'}
            </span>
            <span className="output-event">{eventType}</span>
            <span className="output-time">
              {new Date(timestamp).toLocaleTimeString()}
            </span>
          </div>
        </div>
        <div className="output-actions">
          {fileInfo.canEdit && (
            <span className="action-hint">ÁÇπÂáªÁºñËæë</span>
          )}
          {fileInfo.canDeploy && (
            <span className="action-hint">ÁÇπÂáªÈÉ®ÁΩ≤</span>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className={`local-file-manager ${className}`}>
      {/* Â§¥ÈÉ® */}
      <div className="file-manager-header">
        <div className="header-title">
          <span className="title-icon">üóÇÔ∏è</span>
          <span className="title-text">Êú¨Âú∞Êñá‰ª∂ÁÆ°ÁêÜ</span>
          <span className={`connection-status ${connectionStatus}`}>
            {connectionStatus === 'connected' && 'üü¢'}
            {connectionStatus === 'connecting' && 'üü°'}
            {connectionStatus === 'error' && 'üî¥'}
          </span>
        </div>
        
        <div className="header-actions">
          <button
            className="action-btn"
            onClick={() => setShowConnectDialog(true)}
            title="ËøûÊé•Êñá‰ª∂Â§π"
            disabled={!isConnected}
          >
            üìÅ
          </button>
          <button
            className="action-btn"
            onClick={refreshCurrentFolder}
            title="Âà∑Êñ∞"
            disabled={!currentFolder}
          >
            üîÑ
          </button>
        </div>
      </div>

      {/* Êñá‰ª∂Â§πÈÄâÊã© */}
      {connectedFolders.length > 0 && (
        <div className="folder-selector">
          <select
            value={currentFolder?.id || ''}
            onChange={(e) => {
              const folder = connectedFolders.find(f => f.id === e.target.value);
              setCurrentFolder(folder);
              if (folder) {
                loadFolderFiles(folder.id);
              }
            }}
            className="folder-select"
          >
            {connectedFolders.map(folder => (
              <option key={folder.id} value={folder.id}>
                üìÅ {folder.path} ({folder.fileCount} Êñá‰ª∂)
              </option>
            ))}
          </select>
        </div>
      )}

      {/* ÊêúÁ¥¢ÂíåÊéíÂ∫è */}
      <div className="file-controls">
        <div className="search-box">
          <input
            type="text"
            placeholder="ÊêúÁ¥¢Êñá‰ª∂..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
          <span className="search-icon">üîç</span>
        </div>
        
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="sort-select"
        >
          <option value="name">ÊåâÂêçÁß∞</option>
          <option value="date">ÊåâÊó•Êúü</option>
          <option value="size">ÊåâÂ§ßÂ∞è</option>
          <option value="type">ÊåâÁ±ªÂûã</option>
        </select>
      </div>

      {/* Claude Code ËæìÂá∫ */}
      {claudeOutputs.length > 0 && (
        <div className="claude-outputs-section">
          <div className="section-header">
            <h4>üéØ Claude Code ËæìÂá∫</h4>
            <button
              className="toggle-btn"
              onClick={() => setShowClaudeOutputs(!showClaudeOutputs)}
            >
              {showClaudeOutputs ? 'üîº' : 'üîΩ'}
            </button>
          </div>
          
          {showClaudeOutputs && (
            <div className="claude-outputs-list">
              {claudeOutputs.map(renderClaudeOutput)}
            </div>
          )}
        </div>
      )}

      {/* Êñá‰ª∂ÂàóË°® */}
      <div className="files-section">
        <div className="section-header">
          <h4>üìÑ Êñá‰ª∂ÂàóË°®</h4>
          <span className="file-count">
            {sortedFiles.length} ‰∏™Êñá‰ª∂
          </span>
        </div>
        
        <div className={`file-list ${isLoading ? 'loading' : ''}`}>
          {isLoading ? (
            <div className="loading-indicator">
              <span className="loading-icon">‚è≥</span>
              <span className="loading-text">Âä†ËΩΩ‰∏≠...</span>
            </div>
          ) : sortedFiles.length > 0 ? (
            sortedFiles.map(renderFileItem)
          ) : (
            <div className="empty-state">
              <span className="empty-icon">üìÇ</span>
              <span className="empty-text">
                {searchTerm ? 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÊñá‰ª∂' : 'ËØ∑ËøûÊé•Êñá‰ª∂Â§π'}
              </span>
            </div>
          )}
        </div>
      </div>

      {/* ËøûÊé•Êñá‰ª∂Â§πÂØπËØùÊ°Ü */}
      {showConnectDialog && (
        <div className="connect-dialog-overlay">
          <div className="connect-dialog">
            <div className="dialog-header">
              <h3>ËøûÊé•Êú¨Âú∞Êñá‰ª∂Â§π</h3>
              <button
                className="close-btn"
                onClick={() => setShowConnectDialog(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="dialog-content">
              <div className="input-group">
                <label>Êñá‰ª∂Â§πË∑ØÂæÑ:</label>
                <input
                  type="text"
                  value={folderPath}
                  onChange={(e) => setFolderPath(e.target.value)}
                  placeholder="‰æãÂ¶Ç: /Users/username/projects/my-project"
                  className="folder-path-input"
                />
              </div>
              
              <div className="dialog-actions">
                <button
                  className="cancel-btn"
                  onClick={() => setShowConnectDialog(false)}
                >
                  ÂèñÊ∂à
                </button>
                <button
                  className="connect-btn"
                  onClick={connectLocalFolder}
                  disabled={isLoading || !folderPath.trim()}
                >
                  {isLoading ? 'ËøûÊé•‰∏≠...' : 'ËøûÊé•'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default LocalFileManager;

